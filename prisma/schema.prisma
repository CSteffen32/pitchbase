// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("READER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  pitches  Pitch[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pitch {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  ticker      String
  sector      String?
  rating      Int?        // 1-5 rating
  timeframe   String?     // e.g., "6 months", "1 year"
  summary     String
  content     String?     // Markdown content
  authorName  String?     // Author credit name
  pdfUrl      String?     // S3 URL for PDF
  coverImage  String?     // S3 URL for cover image
  status      String      @default("DRAFT")
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  tags PitchTag[]

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  pitches PitchTag[]
}

model PitchTag {
  pitchId String
  tagId   String

  pitch Pitch @relation(fields: [pitchId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([pitchId, tagId])
}

